[{"user":"tgw0p61q8od","times":[1549200320007,1549200377931,1549200383629,1549200393824,1549200407826,1549200414636,1549200428442,1549200440986,1549200445238,1549200462450,1549200499501,1549200506600,1549200510160,1549200523409,1549200526236,1549200530397,1549200534794,1549200537623,1549200540407,1549200543611,1549200550647,1549200558919,1549200565803,1549200671293,1549200677664,1549200720742,1549200757367,1549200762993,1549200765803,1549201286380,1549201295225,1549201307300,1549201309981,1549201313146,1549201315883,1549201321918,1549201325087,1549201328155,1549201332134,1549201334172,1549201472777,1549201477633,1549201493121,1549201532512,1549201593822,1549201598531,1549201625171,1549201631168,1549201642815,1549201647612,1549201654411,1549202081202,1549202088147,1549202093648,1549202099067,1549202106267,1549202110610,1549202122906,1549202138552,1549202145640,1549202162345,1549202177686,1549202180999,1549202188794,1549202205811,1549202209484,1549202219199,1549202272717,1549202281826,1549202311253,1549202317121,1549202322562,1549202329057,1549202351653,1549202353737,1549202386966,1549202444185,1549202494247,1549202501279,1549202508047,1549202514761,1549202527413,1549202547688,1549202555094,1549202557986,1549202567022,1549202575036,1549202610551,1549202634183,1549202652542,1549202666881,1549202681726,1549202702360,1549202809660,1549202814332,1549202821905,1549202834850,1549202837886,1549202846345,1549202850851,1549202868535,1549202870964,1549202890165,1549202924696,1549202929189,1549202937352,1549202969245,1549202986791,1549202996125,1549203017650,1549203022470,1549203025664,1549203029531,1549203038435,1549203043713,1549203047955,1549203055127,1549203058558,1549203062480,1549203066502,1549203070618,1549203073718,1549203076344,1549203095857,1549203107137,1549203138312,1549203152665,1549203159658,1549203209674,1549203228742,1549203258767,1549203269254,1549203272212,1549203284522,1549203288106,1549203298990,1549203313125,1549203327422,1549203342731,1549203356122,1549203391359,1549203395090,1549203448866,1549203453297,1549203461412,1549203469454,1549203471633,1549203481079,1549203490697,1549203505878,1549203509007,1549203750229,1549203754334,1549203766790,1549203786618,1549203801907,1549203836531,1549203842480,1549203848494,1549203852239,1549203857950,1549203869988,1549203906982,1549203930755,1549203935061,1549203948666,1549203953680,1549203980357,1549203984496,1549203999877,1549204002307,1549204008290],"time":3698265,"code":"import rospy \nfrom std_msgs.msg import String\nfrom hobbit_msgs.msg import Command, Status\n\nobjectName = ''\n\ndef control(message):\n    pub = rospy.Publisher('/head/emo', Cpmmand, queue_size=10)\n    rospy.init_node('node', anonymous=True)\n    rate = rospy.Rate(10)\n    pub.publish(message)\n    \ndef callMMUIService(self, sessionid, txt, params):\n    try:\n        rospy.wait_for_service('/MMUI', 5)\n        servicecall = rospy.ServiceProxy('/MMUI', Request)\n    except rospy.ROSException, e:\n        print('timeout exceeded while waiting for service %s' % e)\n        rospy.loginfo('MMUI is not responding.')\n        return None\n        \n    try:\n        h = Header()\n        h.stamp = rospy.Time.now()\n        req = RequestRequest(h, sessionid, txt, params)\n        resp = servicecall(req)\n        return resp\n    except rospy.ServiceException, e:\n        print \"Service did not process request: %s\" % str(e)\n        return None\n        \ndef yes_or_no(self, text, prm=\"\"):\n    parr = []\n    p = Parameter('type', 'D_YES_NO')\n    parr.append(p)\n    p = Parameter('text', text)\n    parr.append(p)\n    p = Parameter('speak', text)\n    parr.append(p)\n    p = Parameter('Repetitions', \"3\")\n    parr.append(p)\n    p = Parameter('Timeout', \"15\")\n    parr.append(p)\n    if prm != \"\":\n        p = Parameter('parameter', prm)\n        parr.append(p)\n    return self.callMMUIService('0', 'create', parr)\n    \ndef action_client(param):\n    # Creates the SimpleActionClient, passing the type of the action\n    # (FibonacciAction) to the constructor.\n    client = actionlib.SimpleActionClient('armserver', hobbit_msgs.ArmServer)\n\n    # Waits until the action server has started up and started\n    # listening for goals.\n    client.wait_for_server()\n\n    # Creates a goal to send to the action server.\n    goal = hobbit_msgs.ArmServer(param)\n\n    # Sends the goal to the action server.\n    client.send_goal(goal)\n\n    # Waits for the server to finish performing the action.\n    client.wait_for_result()\n\n    # Prints out the result of executing the action\n    return client.get_result()  # A FibonacciResult\n\n        \ndef askForObject(self, text='Please put an object to the table', timeout='30'):\n    parr = []\n    p = Parameter('type', 'D_NAME')\n    parr.append(p)\n    p = Parameter('text', text)\n    parr.append(p)\n    p = Parameter('Timeout', timeout)\n    parr.append(p)\n    return self.callMMUIService('0', 'create', parr)\n    \ndef startedLearning(self, text='iam learning a new object!', timeout='30'):\n    parr = []\n    p = Parameter('type', 'D_NAME')\n    parr.append(p)\n    p = Parameter('text', text)\n    parr.append(p)\n    p = Parameter('Timeout', timeout)\n    parr.append(p)\n    return self.callMMUIService('0', 'create', parr)\n    \ndef placeObject(self, text='Please place object upside down on the table!', timeout='30'):\n    parr = []\n    p = Parameter('type', 'D_NAME')\n    parr.append(p)\n    p = Parameter('text', text)\n    parr.append(p)\n    p = Parameter('Timeout', timeout)\n    parr.append(p)\n    return self.callMMUIService('0', 'create', parr)\n    \ndef learningObject(self, text='I am learning a new object!', timeout='30'):\n    parr = []\n    p = Parameter('type', 'D_NAME')\n    parr.append(p)\n    p = Parameter('text', text)\n    parr.append(p)\n    p = Parameter('Timeout', timeout)\n    parr.append(p)\n    return self.callMMUIService('0', 'create', parr)\n    \ndef removeObject(self, text='Please remove the object from the table!', timeout='30'):\n    parr = []\n    p = Parameter('type', 'D_NAME')\n    parr.append(p)\n    p = Parameter('text', text)\n    parr.append(p)\n    p = Parameter('Timeout', timeout)\n    parr.append(p)\n    return self.callMMUIService('0', 'create', parr)\n    \ndef askForName(self, text='What is the name of this object?', timeout='30'):\n    parr = []\n    p = Parameter('type', 'D_NAME')\n    parr.append(p)\n    p = Parameter('text', text)\n    parr.append(p)\n    p = Parameter('Timeout', timeout)\n    objectName = p\n    parr.append(p)\n    return self.callMMUIService('0', 'create', parr)\n    \ndef finish(self, text='Thnak you, now I know the name of', timeout='30'):\n    parr = []\n    p = Parameter('type', 'D_NAME')\n    parr.append(p)\n    p = Parameter('text', text+objectName)\n    parr.append(p)\n    p = Parameter('Timeout', timeout)\n    objectName = p\n    parr.append(p)\n    return self.callMMUIService('0', 'create', parr)\n\n\n\n    \nif __name__ == '__main__':\n    try:\n        while 1:\n             action_client('grab_turntable')        \n             askForObject()\n             ret = yes_or_no()\n             if ret == 'yes'\n                break\n                #action_client('turn_ccw')\n        control('to_turntable')\n        startedLearning()\n        action_client('turn_cw')\n        placeObject()\n        while 1:\n            response = yes_or_no()\n            if response == 'yes'\n                break\n        learningObject()\n        action_client('turn_ccw')\n        \n        while 1:\n            removeObject()\n            resp = yes_or_no()\n            if resp == 'yes'\n                break\n        action_client('store_turntable') \n        control('center_center')\n        askForName()\n        control('HAPPY')\n        finish()\n            \n    except rospy.ROSInterruptException:\n         pass","type":"code","codetype":"python"}]